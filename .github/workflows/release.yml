name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        go build -ldflags="-w -s" -o dist/prompt-optimize-${{ matrix.goos }}-${{ matrix.goarch }} .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: dist/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run vet
      run: go vet ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: dist/

    - name: Create release archives
      run: |
        cd dist
        for file in prompt-optimize-*; do
          if [[ "$file" == *"linux-amd64"* ]]; then
            tar -czf "${file}.tar.gz" "$file"
            zip "${file}.zip" "$file"
          elif [[ "$file" == *"linux-arm64"* ]]; then
            tar -czf "${file}.tar.gz" "$file"
            zip "${file}.zip" "$file"
          fi
        done
        ls -la

    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag (previous release)
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## 更新日志 / Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" ${PREV_TAG}..HEAD >> CHANGELOG.md
        else
          echo "## 更新日志 / Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "🎉 首次发布 / Initial release" >> CHANGELOG.md
        fi
        
        echo "📦 包含文件 / Included Files:" >> CHANGELOG.md
        echo "- Linux AMD64 二进制文件" >> CHANGELOG.md
        echo "- Linux ARM64 二进制文件" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "🚀 快速安装 / Quick Install:" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo 'curl -fsSL https://raw.githubusercontent.com/JinFanZheng/prompt-optimize/main/quick-install.sh | sudo bash' >> CHANGELOG.md
        echo '```' >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/prompt-optimize-linux-amd64
          dist/prompt-optimize-linux-arm64
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-release:
    name: Auto Release on Main
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: dist/

    - name: Generate version
      id: version
      run: |
        # Get current date for version
        VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Create release archives
      run: |
        cd dist
        for file in prompt-optimize-*; do
          if [[ "$file" == *"linux-amd64"* ]]; then
            tar -czf "${file}.tar.gz" "$file"
            zip "${file}.zip" "$file"
          elif [[ "$file" == *"linux-arm64"* ]]; then
            tar -czf "${file}.tar.gz" "$file"
            zip "${file}.zip" "$file"
          fi
        done

    - name: Create Auto Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Auto Release ${{ steps.version.outputs.version }}"
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/prompt-optimize-linux-amd64
          dist/prompt-optimize-linux-arm64
        body: |
          🤖 **自动发布版本 / Auto Release**
          
          基于最新主分支代码自动构建的版本。
          
          ## 📦 包含文件 / Files Included:
          - `prompt-optimize-linux-amd64` - Linux x86_64 二进制文件
          - `prompt-optimize-linux-arm64` - Linux ARM64 二进制文件
          - 对应的 `.tar.gz` 和 `.zip` 压缩包
          
          ## 🚀 快速安装 / Quick Install:
          ```bash
          curl -fsSL https://raw.githubusercontent.com/JinFanZheng/prompt-optimize/main/quick-install.sh | sudo bash
          ```
          
          ## 🔗 源代码 / Source Code:
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          
          ---
          *此版本由 GitHub Actions 自动构建和发布*
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}